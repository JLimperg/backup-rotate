# backup-rotate

THIS SOFTWARE IS NOT STABLE AND NOT TESTED PROPERLY. Use it only if you've
reviewed the code and believe that it does what it's supposed to do.

## Synopsis

The `backup-rotate` program is a simple script that can be used to keep hourly,
daily and weekly backups. It is intended to be used together with a utility like
[rsnapshot](http://www.rsnapshot.org/) that creates hourly incremental backups.
Its advantage over the builtin rsnapshot rotating mechanism is that it handles
'missed' backups gracefully.

## Usage

`backup-rotate` assumes the following directory structure:

    /path/to/backup-root
    |-- daily.0
    |   |-- date
    |   |-- dir1
    |   `-- dir2
    |-- hourly.0
    |   |-- date
    |   |-- dir1
    |   `-- dir2
    |-- hourly.1
    |   |-- date
    |   |-- dir1
    |   `-- dir2
    |-- weekly.0
    |   |-- date
    |   |-- dir1
    `   `-- dir2

Every backup directory (i.e. every directory that matches
`(hourly|daily|weekly)\.[0-9]+$`) must contain a plain text file named `date`
whose sole content is the date and time on which the backup was created. The
date must be given as `%Y-%m-%d %H:%M`, for example `2013-02-01 22:00`. Note
that `rsnapshot` does not create such a file automatically.

Given such a directory structure, `backup-rotate` will gather all the backup
directories and rename them according to when they were created. The renaming
algorithm goes approximately like this:

1. Group all backups by week. For each week in descending order, take the
   latest backup and rename it to `weekly.#`. Rename no more than the number
   of weekly backups the user wants to keep (customisable via a constant in
   `backup-rotate.hs`).
2. Group all backups that have not yet been renamed by day and rename them
   to `daily.#` in the same way as the weeklies until we hit the maximum amount
   of dailies that should be kept.
3. Enumerate the remaining backups as `hourly.#` until we hit the maximum amount
   of hourlies that should be kept.

When the program is finished renaming, all backups that have not been renamed
(i.e. should not be kept) are permanently deleted.

## Installation

The following steps assume that you've got the Haskell Platform installed.
The script has been created with version 2012.4.0.0 but should run on older
versions as well.

1. Clone the Github repo:

       $ git clone git://github.com/JLimperg/backup-rotate.git

2. Customise the constants in `backup-rotate.hs` to fit your system.
3. Compile the Haskell sources

       $ cd backup-rotate
       $ ghc --make backup-rotate.hs

4. Run `backup-rotate` every time you've finished an hourly backup.

## Known Issues and Shortcomings

1. The script does no error handling whatsoever, which means that it will fail
   immediately if anything I/O-related goes wrong. On the upside, this also
   means that if your backups are messed up, it probably won't mess them up any
   further.
2. The script only allows for weekly, daily and hourly backups. This could
   probably be generalised to allow for arbitrary intervals.
3. The script is currently not unit tested.
4. The script can only be customised by editing constants in the source code
   and recompiling. A proper CLI would be more practical.

## License

This program is made available under the MIT License, a copy of which can be
found in the LICENSE file.
